%include {

#define NDEBUG
#include <assert.h>
#include <string>
#include "devinput-parser.h"
#include "devinput.h"

#define STRING(x, X) \
    std::string x{std::move(*X)}; \
    delete X

}

%name DevInputParse
%token_prefix InputToken_

%parse_accept {
}

%parse_failure {
    args->error = true;
}

%syntax_error {
    args->error = true;
}

%extra_argument { DevInputArgs *__attribute__((unused)) args }
%token_type { const std::string * }
%token_destructor { delete $$; }

%type expr { ValueExpr * }
%destructor expr { delete $$; }

%type value_ref { ValueRef * }
%destructor value_ref { delete $$; }

%type value_const { ValueConst * }
%destructor value_const { delete $$; }

%left QUESTION.
%left COMMA.
%left AND.
%left OR.
%nonassoc GT LT.
%left PLUS MINUS.
%left MULT DIV.

input ::= expr(A). { args->input = A; }

expr(A) ::= LPAREN expr(B) RPAREN. { A = B; }
expr(A) ::= value_ref(B). { A = B; }
expr(A) ::= value_const(B). { A = B; }
expr(A) ::= LPAREN expr(B) COMMA expr(C) RPAREN. { A = new ValueTuple(B, C); }
expr(A) ::= expr(B) QUESTION expr(C) COLON expr(D). { A = new ValueCond(B, C, D); }

expr(A) ::= expr(B) PLUS expr(C). { A = new ValueOper(InputToken_PLUS, B, C); }
expr(A) ::= expr(B) MINUS expr(C). { A = new ValueOper(InputToken_MINUS, B, C); }
expr(A) ::= expr(B) AND expr(C). { A = new ValueOper(InputToken_AND, B, C); }
expr(A) ::= expr(B) OR expr(C). { A = new ValueOper(InputToken_OR, B, C); }
expr(A) ::= expr(B) GT expr(C). { A = new ValueOper(InputToken_GT, B, C); }
expr(A) ::= expr(B) LT expr(C). { A = new ValueOper(InputToken_LT, B, C); }
expr(A) ::= expr(B) MULT expr(C). { A = new ValueOper(InputToken_MULT, B, C); }
expr(A) ::= expr(B) DIV expr(C). { A = new ValueOper(InputToken_DIV, B, C); }

value_ref(A) ::= NAME(B) PERIOD NAME(C). {
    STRING(b, B);
    STRING(c, C);
    A = create_value_ref(b, c, args->finder);
}

value_const(A) ::= NUMBER(B). {
    STRING(b, B);
    char *end;
    long int val = strtol(b.c_str(), &end, 0);
    if (*end)
        throw std::runtime_error("invalid number: " + b);
    A = new ValueConst(val);
}
value_const(A) ::= MINUS NUMBER(B). {
    STRING(b, B);
    char *end;
    long int val = strtol(b.c_str(), &end, 0);
    if (*end)
        throw std::runtime_error("invalid number: " + b);
    A = new ValueConst(-val);
}

